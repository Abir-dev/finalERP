generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  md
  client_manager @map("client-manager")
  store
  accounts
  site
  client
  hr
  project
}

model User {
  id                  String             @id @default(uuid()) @db.Uuid
  email               String             @unique
  name                String
  role                UserRole
  avatar              String?
  createdAt           DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  status              String             @default("inactive")
  lastLogin           DateTime?          @map("last_login") @db.Timestamptz(6)
  password            String
  documents           Document[]
  managedProjects     Project[]          @relation("ProjectManagers")
  memberProjects      Project[]          @relation("ProjectMembers")
  clientProjects      Project[]          @relation("ProjectClient")
  invoices            Invoice[]          @relation("UserInvoices")
  // bids             Bid[]             @relation("UserBids")
  notifications       Notification[]     @relation("UserNotifications")
  messagesSent        Message[]          @relation("MessagesSent")
  messagesReceived    Message[]          @relation("MessagesReceived")
  materialRequests    MaterialRequest[]  @relation("UserMaterialRequests")
  taxes               Tax[]
  Invoice             Invoice[]
  Payment             Payment[]
  MaterialRequest     MaterialRequest[]  @relation("MaterialRequestApprovals")
  PurchaseOrder       PurchaseOrder[]
  createdVendors      Vendor[]           @relation("VendorCreator")
  createdNonBillables NonBillable[]      @relation("NonBillableCreator")
  Bid                 Bid[]
  createdIssues       IssueReport[]      @relation("IssueCreator")
  assignedIssues      IssueReport[]      @relation("IssueAssignments")
  Vehicle             Vehicle[]          @relation("VehicleCreator")
  createdEvents       Event[]            @relation("EventCreator")
  Inventory           Inventory[]        @relation("InventoryCreator")
  approvedTransfers   MaterialTransfer[] @relation("MaterialTransferApproval")
  createdTransfers    MaterialTransfer[] @relation("MaterialTransferCreator")
  scheduledMaintenance ScheduleMaintenance[] @relation("MaintenanceScheduler")
  createdProjects     Project[]            @relation("ProjectCreator")

  @@map("users")
}

model UserInvitation {
  id            String   @id @default(cuid()) @db.Uuid
  email         String
  name          String
  role          String
  token         String   @unique
  encryptedData String   @map("encrypted_data")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  expiresAt     DateTime @map("expires_at") @db.Timestamptz(6)
  used          Boolean  @default(false)

  @@map("user_invitations")
}

model Project {
  id                  String            @id @default(uuid()) @db.Uuid
  name                String
  clientId            String            @db.Uuid
  client              User              @relation("ProjectClient", fields: [clientId], references: [id])
  startDate           DateTime
  endDate             DateTime?
  location            String?
  budget              Float?
  projectType         ProjectType?      // Changed to enum
  managers             User           @relation("ProjectManagers", fields: [managerId], references: [id])
  managerId        String              @db.Uuid
  members             User[]            @relation("ProjectMembers")
  tasks               Task[]
  invoices            Invoice[]
  materialRequests    MaterialRequest[]
  nonBillables        NonBillable[]
  totalSpend          Float?
  
  // New fields from the form
  squareFootage       Int?
  contingency         Float?
  projectStartDate    DateTime?
  estimatedDuration   Int?
  description         String?
  contractType        ContractType?     // Enum (already updated)
  estimatedCost       Int?
  defaultCostCenter   String?
  
  createdAt           DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  Tender              Tender[]
  Payment             Payment[]
  milestones          ProjectMilestone[]
  createdById         String?              @db.Uuid
  createdBy           User?                @relation("ProjectCreator", fields: [createdById], references: [id])
}

model ProjectMilestone {
  id          String   @id @default(uuid()) @db.Uuid
  projectId   String   @db.Uuid
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name        String
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
}

model NonBillable {
  id          String   @id @default(uuid()) @db.Uuid
  projectId   String   @db.Uuid
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name        String
  amount      Float
  description String?
  createdBy   String   @db.Uuid
  creator     User     @relation("NonBillableCreator", fields: [createdBy], references: [id])
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("non_billables")
}

model Task {
  id          String    @id @default(uuid()) @db.Uuid
  projectId   String    @db.Uuid
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name        String
  description String?
  assignedTo  String?
  status      String    @default("pending")
  dueDate     DateTime?
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
}

model Invoice {
  id                   String        @id @default(uuid()) @db.Uuid
  userId               String        @db.Uuid
  user                 User          @relation(fields: [userId], references: [id])
  projectId            String        @db.Uuid
  project              Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  clientId             String        @db.Uuid
  client               User          @relation("UserInvoices", fields: [clientId], references: [id])
  invoiceNumber        String
  date                 DateTime
  dueDate              DateTime
  status               InvoiceStatus @default(DRAFT)
  type                 InvoiceType   @default(STANDARD)
  applyGst             Boolean       @default(false)
  applyRetention       Boolean       @default(false)
  subtotal             Float
  retentionAmount      Float
  baseAfterRetention   Float
  taxAmount            Float
  total                Float
  workCompletedPercent Int?
  termsAndConditions   String?
  internalNotes        String?
  items                InvoiceItem[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  Payment              Payment[]
}

model InvoiceItem {
  id           String  @id @default(uuid())
  invoiceId    String  @db.Uuid
  invoice      Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  serialNumber String
  description  String
  item         String
  unit         Unit
  quantity     Int
  rate         Float
  amount       Float
}

model Payment {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid // Foreign key to User
  user   User   @relation(fields: [userId], references: [id])

  paymentType   PaymentType
  postingDate   DateTime
  modeOfPayment String?

  partyType PartyType
  party     String
  partyName String

  accountPaidTo String
  amount        Float // Base payment amount (excluding taxes)
  total         Float // Total amount (including taxes)

  taxes TaxCharge[] // Relation to TaxCharge

  companyAddress  String?
  customerAddress String?
  placeOfSupply   String?

  projectId  String  @db.Uuid
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  costCenter String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String   @db.Uuid
}

model Inventory {
  id                    String                 @id @default(uuid()) @db.Uuid
  itemName              String
  category              InventoryCategory
  quantity              Int
  unit                  Unit
  location              String
  reorderLevel          Int
  maximumStock          Int
  safetyStock           Int
  primarySupplierName   String
  vendorId              String                 @db.Uuid
  primarySupplier       Vendor                 @relation("PrimaryVendor", fields: [vendorId], references: [id])
  secondarySupplierName String?
  secondarySupplier     Vendor?                @relation("SecondaryVendor", fields: [secondaryVendorId], references: [id])
  secondaryVendorId     String?                @db.Uuid
  unitCost              Int
  createdById           String                 @map("created_by_id") @db.Uuid
  createdBy             User                   @relation("InventoryCreator", fields: [createdById], references: [id], onDelete: Cascade)
  createdAt             DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  requests              MaterialRequest[]
  transferItems         MaterialTransferItem[]
}

model MaterialRequest {
  id              String                 @id @default(uuid()) @db.Uuid
  requestNumber   String                 @unique // Manually input by user
  transactionDate DateTime               @db.Timestamptz(6)
  purpose         MaterialRequestPurpose @default(PURCHASE)
  requiredBy      DateTime? // General required by date (string for flexibility)
  priceList       String? // e.g. "Standard Buying"
  targetWarehouse String? // Default warehouse for all items
  terms           String? // Terms and conditions
  moreInfo        String? // Additional information
  status          MaterialRequestStatus  @default(PENDING)
  submittedAt     DateTime?              @db.Timestamptz(6)
  approvedAt      DateTime?              @db.Timestamptz(6)
  approvedBy      String?                @db.Uuid
  approver        User?                  @relation("MaterialRequestApprovals", fields: [approvedBy], references: [id])
  rejectionReason String?
  requestedBy     String                 @db.Uuid
  requester       User                   @relation("UserMaterialRequests", fields: [requestedBy], references: [id])
  projectId       String?                @db.Uuid
  project         Project?               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  items           MaterialRequestItem[]
  createdAt       DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  InventoryItem   Inventory?             @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId String?                @db.Uuid

  @@map("material_requests")
}

model Tender {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  description String
  deadline    DateTime
  budget      Float
  status      String   @default("open")
  projectId   String   @db.Uuid
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  bids        Bid[]
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
}

model Bid {
  id        String   @id @default(uuid()) @db.Uuid
  tenderId  String   @db.Uuid
  tender    Tender   @relation(fields: [tenderId], references: [id], onDelete: Cascade)
  vendorId  String   @db.Uuid
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  amount    Float
  status    String   @default("submitted")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
}

model Employee {
  id              String           @id @default(uuid()) @db.Uuid
  name            String
  position        String
  department      String
  joinedAt        DateTime
  leftAt          DateTime?
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  salaryRecords   EmployeeSalary[]
}

model EmployeeSalary {
  id          String                   @id @default(uuid()) @db.Uuid
  employeeId  String                   @db.Uuid
  employee    Employee                 @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  netSalary   Float
  paymentDate DateTime?                @db.Timestamptz(6)
  remarks     String?
  earningsId  String                   @unique @db.Uuid
  earnings    EmployeeSalaryEarnings   @relation(fields: [earningsId], references: [id], onDelete: Cascade)
  deductionsId String                  @unique @db.Uuid
  deductions  EmployeeSalaryDeductions @relation(fields: [deductionsId], references: [id], onDelete: Cascade)
  createdAt   DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime                 @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("employee_salaries")
}

model EmployeeSalaryEarnings {
  id               String          @id @default(uuid()) @db.Uuid
  basic            Float           @default(0)
  da               Float           @default(0) // Dearness Allowance
  hra              Float           @default(0) // House Rent Allowance
  conveyance       Float           @default(0)
  allowance        Float           @default(0)
  medicalAllowance Float           @default(0) @map("medical_allowance")
  others           Float           @default(0)
  total            Float           @default(0) // Calculated field
  employeeSalary   EmployeeSalary?
  createdAt        DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("employee_salary_earnings")
}

model EmployeeSalaryDeductions {
  id             String          @id @default(uuid()) @db.Uuid
  tds            Float           @default(0) // Tax Deducted at Source
  esi            Float           @default(0) // Employee State Insurance
  pf             Float           @default(0) // Provident Fund
  leave          Float           @default(0) // Leave deduction
  profTax        Float           @default(0) @map("prof_tax") // Professional Tax
  labourWelfare  Float           @default(0) @map("labour_welfare") // Labour Welfare Fund
  others         Float           @default(0)
  total          Float           @default(0) // Calculated field
  employeeSalary EmployeeSalary?
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("employee_salary_deductions")
}

model Notification {
  id        String   @id @default(uuid()) @db.Uuid
  to        String   @db.Uuid
  user      User     @relation("UserNotifications", fields: [to], references: [id], onDelete: Cascade)
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  from      String   @db.Uuid
  sender    User     @relation("MessagesSent", fields: [from], references: [id], onDelete: Cascade)
  to        String   @db.Uuid
  receiver  User     @relation("MessagesReceived", fields: [to], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
}

model Document {
  id        String   @id @default(cuid()) @db.Uuid
  title     String
  content   String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model PurchaseOrder {
  id         String   @id @default(uuid()) @db.Uuid
  poNumber   String
  date       DateTime
  //  vendor                    String
  requiredBy DateTime

  setTargetWarehouse    String?
  vendorAddress         String
  vendorContact         String
  shippingAddress       String
  dispatchAddress       String
  companyBillingAddress String
  placeOfSupply         String
  paymentTermsTemplate  String
  terms                 String
  totalQuantity         Decimal
  total                 Decimal
  grandTotal            Decimal
  roundingAdjustment    Decimal
  roundedTotal          Decimal

  advancePaid          Decimal
  taxesAndChargesTotal Decimal
  userId               String              @db.Uuid
  user                 User                @relation(fields: [userId], references: [id])
  items                PurchaseOrderItem[]
  taxesAndCharges      TaxCharge[]
  paymentSchedule      PaymentTerm[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  GRN                  GRN[]
  Vendor               Vendor              @relation(fields: [vendorId], references: [id])
  vendorId             String              @db.Uuid
}

model PurchaseOrderItem {
  id              String        @id @default(uuid()) @db.Uuid
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId String        @db.Uuid
  itemCode        String
  description     String
  requiredBy      DateTime
  quantity        Decimal
  uom             String
  rate            Decimal
  amount          Decimal
}

model PaymentTerm {
  id              String        @id @default(uuid()) @db.Uuid
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId String        @db.Uuid
  paymentTerm     String
  description     String
  dueDate         DateTime
  invoicePortion  Decimal
  paymentAmount   Decimal
}

model GRN {
  id            String        @id @default(uuid()) @db.Uuid
  poId          String        @db.Uuid
  purchaseOrder PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
  receivedDate  DateTime
  items         String // JSON or text for now
  receivedBy    String
  remarks       String?
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
}

model EquipmentMaintenance {
  id              String   @id @default(uuid()) @db.Uuid
  equipmentId     String
  maintenanceType String
  notes           String?
  nextService     Int?
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
}

model LaborLog {
  id        String   @id @default(uuid()) @db.Uuid
  trade     String
  workers   Int
  hours     Int
  overtime  Int?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
}

model BudgetAdjustment {
  id             String   @id @default(uuid()) @db.Uuid
  category       String
  adjustmentType String // increase, decrease
  amount         Float
  reason         String
  effectiveDate  DateTime
  approver       String
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
}

model IssueReport {
  id                      String        @id @default(uuid()) @db.Uuid
  title                   String
  type                    IssueType     @default(OTHER)
  priority                IssuePriority @default(MEDIUM)
  status                  IssueStatus   @default(OPEN)
  reportedBy              String
  reportedAt              DateTime      @default(now()) @map("reported_at") @db.Timestamptz(6)
  assignedToId            String?       @map("assigned_to_id") @db.Uuid
  assignedTo              User?         @relation("IssueAssignments", fields: [assignedToId], references: [id], onDelete: Cascade)
  description             String
  location                String
  estimatedResolutionTime Float?        @map("estimated_resolution_time")
  actualResolutionTime    Float?        @map("actual_resolution_time")
  startResolutionAt       DateTime?     @map("start_resolution_at") @db.Timestamptz(6)
  markedResolvedAt        DateTime?     @map("marked_resolved_at") @db.Timestamptz(6)
  isStartResolution       Boolean       @default(false) @map("is_start_resolution")
  isMarkedResolved        Boolean       @default(false) @map("is_marked_resolved")
  createdById             String        @map("created_by_id") @db.Uuid
  createdBy               User          @relation("IssueCreator", fields: [createdById], references: [id], onDelete: Cascade)
  createdAt               DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("issue_reports")
}

model DailyProgressReport {
  id             String   @id @default(uuid()) @db.Uuid
  projectId      String   @db.Uuid
  workDone       String
  weather        String
  photos         String? // file links, JSON
  notes          String?
  workSections   String // JSON or comma separated
  manpower       String
  manpowerRoles  String
  equipmentUsed  String // JSON or comma separated
  safetyIncident String?
  safetyDetails  String?
  qualityCheck   String?
  qualityDetails String?
  delayIssue     String?
  delayDetails   String?
  materials      String // JSON
  subcontractor  String?
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
}

model WeeklyProgressReport {
  id              String   @id @default(uuid()) @db.Uuid
  projectId       String   @db.Uuid
  weekStart       DateTime
  weekEnding      DateTime
  milestones      String
  plannedProgress String
  actualProgress  String
  progressRemarks String?
  issues          String?
  risks           String?
  safetySummary   String?
  qualitySummary  String?
  manpower        String // JSON
  equipment       String // JSON
  materials       String // JSON
  teamPerformance String?
  attachments     String? // file links, JSON
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
}

model Event {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  type        String
  date        DateTime
  time        String
  description String?
  createdById String   @map("created_by_id") @db.Uuid
  createdBy   User     @relation("EventCreator", fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("events")
}

model Vendor {
  id          String      @id @default(uuid()) @db.Uuid
  gstin       String? // GSTIN / UIN
  name        String // Vendor Name (required)
  vendorType  VendorType  @default(COMPANY)
  gstCategory GstCategory @default(UNREGISTERED)

  // Contact Information
  email  String?
  mobile String?

  // Address Information
  postalCode   String?
  addressLine1 String?
  addressLine2 String?
  city         String?
  state        String?
  country      String  @default("India")

  // Relationships
  createdBy String @db.Uuid
  creator   User   @relation("VendorCreator", fields: [createdBy], references: [id])

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Additional fields for existing functionality
  category     String?
  location     String?
  contact      String?
  address      String?
  paymentTerms String?
  documents    String? // JSON or comma separated file links

  purchaseOrders     PurchaseOrder[]
  bids               Bid[]
  PrimaryInventory   Inventory[]     @relation("PrimaryVendor")
  SecondaryInventory Inventory[]     @relation("SecondaryVendor")
  inventoryId        String?         @db.Uuid

  @@map("vendors")
}

model Tax {
  id          String      @id @default(uuid()) @db.Uuid
  title       String
  company     String
  taxCategory String?
  userId      String      @db.Uuid
  user        User        @relation(fields: [userId], references: [id])
  taxCharges  TaxCharge[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model TaxCharge {
  id              String         @id @default(uuid()) @db.Uuid
  serialNo        Int
  paymentId       String?        @db.Uuid
  taxId           String?        @db.Uuid
  payment         Payment?       @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  tax             Tax?           @relation(fields: [taxId], references: [id], onDelete: Cascade)
  type            TaxType
  accountHead     String
  taxRate         Float
  amount          Float
  total           Float
  PurchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId String?        @db.Uuid
}

// Items within a material request
model MaterialRequestItem {
  id                String          @id @default(uuid()) @db.Uuid
  materialRequestId String          @db.Uuid
  materialRequest   MaterialRequest @relation(fields: [materialRequestId], references: [id], onDelete: Cascade)
  itemCode          String
  requiredBy        String? // Date as string for flexibility
  quantity          Float           @default(0)
  targetWarehouse   String?
  uom               String
  createdAt         DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("material_request_items")
}

model Vehicle {
  id                 String             @id @default(uuid()) @db.Uuid
  vehicleName        String
  vehicleType        String
  registrationNumber String
  assignedSite       String
  licensePlate       String
  driverName         String
  movement           VehicleMovement[]
  maintenanceHistory Maintenance[]
  createdById        String             @map("created_by_id") @db.Uuid
  createdBy          User               @relation("VehicleCreator", fields: [createdById], references: [id], onDelete: Cascade)
  MaterialTransfer   MaterialTransfer[]
}

model VehicleMovement {
  id        String   @id @default(uuid())
  Vehicle   Vehicle? @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId String?  @db.Uuid
  from      String
  to        String
  date      DateTime
}

model Maintenance {
  id           String        @id @default(uuid()) @db.Uuid
  Vehicle      Vehicle?      @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId    String?       @db.Uuid
  lastServiced DateTime
  nextDue      DateTime
  status       VehicleStatus
}

// Records the movement of materials between locations (e.g., Warehouse → Site)
model MaterialTransfer {
  id            String         @id @default(uuid()) @db.Uuid
  transferID    String         @unique
  fromLocation  String
  toLocation    String
  requestedDate DateTime       @map("requested_date") @db.Timestamptz(6)
  status        TransferStatus @default(PENDING)
  driverName    String?
  etaMinutes    Int?           @map("eta_minutes")

  // Approvals
  approvedById String? @db.Uuid
  approvedBy   User?   @relation("MaterialTransferApproval", fields: [approvedById], references: [id])

  // Vehicle used for transport
  vehicleId String?  @db.Uuid
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  // Creator/auditing
  createdById String @db.Uuid
  createdBy   User   @relation("MaterialTransferCreator", fields: [createdById], references: [id], onDelete: Cascade)

  // Priority and items
  priority TransferPriority       @default(NORMAL)
  items    MaterialTransferItem[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("material_transfers")
}

// Line items within a material transfer
model MaterialTransferItem {
  id         String           @id @default(uuid()) @db.Uuid
  transferId String           @db.Uuid
  transfer   MaterialTransfer @relation(fields: [transferId], references: [id], onDelete: Cascade)

  // Optional link to an inventory master record
  inventoryId String?    @db.Uuid
  inventory   Inventory? @relation(fields: [inventoryId], references: [id])

  description String
  quantity    Float   @default(0)
  unit        Unit?
  notes       String?

  @@map("material_transfer_items")
}
model ScheduleMaintenance {
  id              String              @id @default(uuid()) @db.Uuid
  equipmentName   String
  maintenanceType MaintenanceType
  scheduledDate   DateTime
  Priority        MaintenancePriority
  technicianName  String
  estimatedTime   Int
  description     String
  additionalNotes String
  createdById     String              @db.Uuid
  createdBy       User                @relation("MaintenanceScheduler", fields: [createdById], references: [id], onDelete: Cascade)
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  EMERGENCY
  INSPECTION
  CALIBRATION
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
enum VehicleStatus {
  ACTIVE
  IDLE
  MAINTENANCE
}

enum TaxType {
  TDS
  GST
  TCS
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum InvoiceType {
  STANDARD
  PROFORMA
  CREDIT_NOTE
  DEBIT_NOTE
}

enum Unit {
  CUBIC_METRE
  TONNE
  SQUARE_METRE
  PIECE
  LITRE
  KILOGRAM
  BOX
  ROLL
  SHEET
  HOURS
  DAYS
  LUMPSUM
  // Add more as needed
}

enum PaymentType {
  RECEIVE
  PAY
}

enum PartyType {
  CUSTOMER
  VENDOR
  EMPLOYEE
  BANK
}

enum MaterialRequestStatus {
  PENDING
  IN_PROGRESS
  REJECTED
  COMPLETED
}

enum MaterialRequestPurpose {
  PURCHASE
  TRANSFER
  CONSUMPTION
  MAINTENANCE
  OTHER
}

// Vendor Type Enum
enum VendorType {
  COMPANY
  INDIVIDUAL
  PARTNERSHIP
  PROPRIETORSHIP
}

// GST Category Enum
enum GstCategory {
  UNREGISTERED
  REGISTERED
  COMPOSITION
  SEZ
  DEEMED_EXPORT
}

// Issue Report Enums
enum IssueType {
  LABOR_SHORTAGE   @map("labor-shortage")
  MACHINERY_DEFECT @map("machinery-defect")
  QUALITY_ISSUE    @map("quality-issue")
  SAFETY_CONCERN   @map("safety-concern")
  MATERIAL_DELAY   @map("material-delay")
  OTHER
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IssueStatus {
  OPEN
  IN_PROGRESS @map("in-progress")
  RESOLVED
}

enum InventoryCategory {
  CONSTRUCTION_MATERIALS
  TOOLS_AND_EQUIPMENT
  SAFETY_EQUIPMENT
  ELECTRICAL_COMPONENTS
  PLUMBING_MATERIALS
  HVAC_EQUIPMENT
  FINISHING_MATERIALS
  HARDWARE_AND_FASTENERS
}

// Status for material transfer lifecycle
enum TransferStatus {
  PENDING
  IN_TRANSIT @map("in-transit")
  DELIVERED
  CANCELLED
}

// Operational priority for transfers
enum TransferPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}
// Enums for both fields
enum ProjectType {
  RESIDENTIAL
  COMMERCIAL
  INDUSTRIAL
  INFRASTRUCTURE
}

enum ContractType {
  FIXED_PRICE
  COST_PLUS
  TIME_AND_MATERIALS
  UNIT_PRICE
}