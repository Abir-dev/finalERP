generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  md
  client_manager @map("client-manager")
  store
  accounts
  site
  client
}

model User {
  id               String            @id @default(uuid()) @db.Uuid
  email            String            @unique
  name             String
  role             UserRole
  avatar           String?
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  status           String            @default("inactive")
  lastLogin        DateTime?         @map("last_login") @db.Timestamptz(6)
  password         String
  documents        Document[]
  projects         Project[]         @relation("ProjectMembers")
  managedProjects  Project[]         @relation("ProjectManagers")
  projectsClient   Project[]         @relation("ProjectClient")
  invoices         Invoice[]         @relation("UserInvoices")
  // bids             Bid[]             @relation("UserBids")
  notifications    Notification[]    @relation("UserNotifications")
  messagesSent     Message[]         @relation("MessagesSent")
  messagesReceived Message[]         @relation("MessagesReceived")
  materialRequests MaterialRequest[] @relation("UserMaterialRequests")
  employeeProfile  Employee?
  taxes            Tax[]
  Invoice          Invoice[]
  Payment          Payment[]
  MaterialRequest  MaterialRequest[] @relation("MaterialRequestApprovals")
  PurchaseOrder    PurchaseOrder[]
  createdVendors   Vendor[]          @relation("VendorCreator")
  Bid              Bid[]

  @@map("users")
}

model UserInvitation {
  id            String   @id @default(cuid()) @db.Uuid
  email         String
  name          String
  role          String
  token         String   @unique
  encryptedData String   @map("encrypted_data")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  expiresAt     DateTime @map("expires_at") @db.Timestamptz(6)
  used          Boolean  @default(false)

  @@map("user_invitations")
}

model Project {
  id               String            @id @default(uuid()) @db.Uuid
  name             String
  clientId         String            @db.Uuid
  client           User              @relation("ProjectClient", fields: [clientId], references: [id])
  startDate        DateTime
  endDate          DateTime
  status           String            @default("active")
  managers         User[]            @relation("ProjectManagers")
  members          User[]            @relation("ProjectMembers")
  tasks            Task[]
  invoices         Invoice[]
  materialRequests MaterialRequest[]
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  Tender           Tender[]
  Payment          Payment[]
}

model Task {
  id          String    @id @default(uuid()) @db.Uuid
  projectId   String    @db.Uuid
  project     Project   @relation(fields: [projectId], references: [id])
  name        String
  description String?
  assignedTo  String?
  status      String    @default("pending")
  dueDate     DateTime?
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
}

model Invoice {
  id                   String        @id @default(uuid()) @db.Uuid
  userId               String        @db.Uuid
  user                 User          @relation(fields: [userId], references: [id])
  projectId            String        @db.Uuid
  project              Project       @relation(fields: [projectId], references: [id])
  clientId             String        @db.Uuid
  client               User          @relation("UserInvoices", fields: [clientId], references: [id])
  invoiceNumber        String
  date                 DateTime
  dueDate              DateTime
  status               InvoiceStatus @default(DRAFT)
  type                 InvoiceType   @default(STANDARD)
  applyGst             Boolean       @default(false)
  applyRetention       Boolean       @default(false)
  subtotal             Float
  retentionAmount      Float
  baseAfterRetention   Float
  taxAmount            Float
  total                Float
  workCompletedPercent Int?
  termsAndConditions   String?
  internalNotes        String?
  items                InvoiceItem[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  Payment              Payment[]
}

model InvoiceItem {
  id           String  @id @default(uuid())
  invoiceId    String  @db.Uuid
  invoice      Invoice @relation(fields: [invoiceId], references: [id])
  serialNumber String
  description  String
  item         String
  unit         Unit
  quantity     Int
  rate         Float
  amount       Float
}

model Payment {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid // Foreign key to User
  user   User   @relation(fields: [userId], references: [id])

  paymentType   PaymentType
  postingDate   DateTime
  modeOfPayment String?

  partyType PartyType
  party     String
  partyName String

  accountPaidTo String

  taxes TaxCharge[] // Relation to TaxCharge

  companyAddress  String?
  customerAddress String?
  placeOfSupply   String?

  projectId  String  @db.Uuid
  project    Project @relation(fields: [projectId], references: [id])
  costCenter String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId String   @db.Uuid
}

model InventoryItem {
  id        String            @id @default(uuid()) @db.Uuid
  name      String
  quantity  Int
  unit      String
  createdAt DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  requests  MaterialRequest[]
}

model MaterialRequest {
  id              String                 @id @default(uuid()) @db.Uuid
  requestNumber   String                 @unique // Manually input by user
  transactionDate DateTime               @db.Timestamptz(6)
  purpose         MaterialRequestPurpose @default(PURCHASE)
  requiredBy      DateTime? // General required by date (string for flexibility)
  priceList       String? // e.g. "Standard Buying"
  targetWarehouse String? // Default warehouse for all items
  terms           String? // Terms and conditions
  moreInfo        String? // Additional information
  status          MaterialRequestStatus  @default(DRAFT)
  submittedAt     DateTime?              @db.Timestamptz(6)
  approvedAt      DateTime?              @db.Timestamptz(6)
  approvedBy      String?                @db.Uuid
  approver        User?                  @relation("MaterialRequestApprovals", fields: [approvedBy], references: [id])
  rejectionReason String?
  requestedBy     String                 @db.Uuid
  requester       User                   @relation("UserMaterialRequests", fields: [requestedBy], references: [id])
  projectId       String?                @db.Uuid
  project         Project?               @relation(fields: [projectId], references: [id])
  items           MaterialRequestItem[]
  createdAt       DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  InventoryItem   InventoryItem?         @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId String?                @db.Uuid

  @@map("material_requests")
}

model Tender {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  description String
  deadline    DateTime
  budget      Float
  status      String   @default("open")
  projectId   String   @db.Uuid
  project     Project  @relation(fields: [projectId], references: [id])
  bids        Bid[]
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
}

model Bid {
  id        String   @id @default(uuid()) @db.Uuid
  tenderId  String   @db.Uuid
  tender    Tender   @relation(fields: [tenderId], references: [id])
  vendorId  String   @db.Uuid
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  amount    Float
  status    String   @default("submitted")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid

}

model Employee {
  id         String    @id @default(uuid()) @db.Uuid
  userId     String    @unique @db.Uuid
  user       User      @relation(fields: [userId], references: [id])
  position   String
  department String
  salary     Float
  joinedAt   DateTime
  leftAt     DateTime?
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
}

model Notification {
  id        String   @id @default(uuid()) @db.Uuid
  to        String   @db.Uuid
  user      User     @relation("UserNotifications", fields: [to], references: [id])
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  from      String   @db.Uuid
  sender    User     @relation("MessagesSent", fields: [from], references: [id])
  to        String   @db.Uuid
  receiver  User     @relation("MessagesReceived", fields: [to], references: [id])
  content   String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
}

model Document {
  id        String   @id @default(cuid()) @db.Uuid
  title     String
  content   String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id])

  @@map("documents")
}

model PurchaseOrder {
  id                        String              @id @default(uuid()) @db.Uuid 
  poNumber                  String
  date                      DateTime
  vendor                  String
  requiredBy                DateTime
  applyTaxWithholdingAmount Boolean
  isReverseCharge           Boolean
  isSubcontracted           Boolean
  setTargetWarehouse        String?
  vendorAddress           String
  vendorContact           String
  shippingAddress           String
  dispatchAddress           String
  companyBillingAddress     String
  placeOfSupply             String
  paymentTermsTemplate      String
  terms                     String
  totalQuantity             Decimal
  total                     Decimal
  grandTotal                Decimal
  roundingAdjustment        Decimal
  roundedTotal              Decimal
  disableRoundedTotal       Boolean
  advancePaid               Decimal
  taxesAndChargesTotal      Decimal
  userId                    String  @db.Uuid 
  user                      User                @relation(fields: [userId], references: [id])
  items                     PurchaseOrderItem[]
  taxesAndCharges           TaxCharge[]
  paymentSchedule           PaymentTerm[]
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  GRN                       GRN[]
  Vendor                    Vendor?             @relation(fields: [vendorId], references: [id])
  vendorId                  String?             @db.Uuid
}

model PurchaseOrderItem {
  id              String        @id @default(uuid())  @db.Uuid 
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String  @db.Uuid 
  itemCode        String
  description     String
  requiredBy      DateTime
  quantity        Decimal
  uom             String
  rate            Decimal
  amount          Decimal
}

model PaymentTerm {
  id              String        @id @default(uuid())  @db.Uuid 
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String  @db.Uuid 
  paymentTerm     String
  description     String
  dueDate         DateTime
  invoicePortion  Decimal
  paymentAmount   Decimal
}

model GRN {
  id            String        @id @default(uuid()) @db.Uuid
  poId          String        @db.Uuid
  purchaseOrder PurchaseOrder @relation(fields: [poId], references: [id])
  receivedDate  DateTime
  items         String // JSON or text for now
  receivedBy    String
  remarks       String?
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
}

model EquipmentMaintenance {
  id              String   @id @default(uuid()) @db.Uuid
  equipmentId     String
  maintenanceType String
  notes           String?
  nextService     Int?
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
}

model LaborLog {
  id        String   @id @default(uuid()) @db.Uuid
  trade     String
  workers   Int
  hours     Int
  overtime  Int?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
}

model BudgetAdjustment {
  id             String   @id @default(uuid()) @db.Uuid
  category       String
  adjustmentType String // increase, decrease
  amount         Float
  reason         String
  effectiveDate  DateTime
  approver       String
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
}

model IssueReport {
  id               String   @id @default(uuid()) @db.Uuid
  category         String
  description      String
  severity         String
  responsibleParty String
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
}

model DailyProgressReport {
  id             String   @id @default(uuid()) @db.Uuid
  projectId      String   @db.Uuid
  workDone       String
  weather        String
  photos         String? // file links, JSON
  notes          String?
  workSections   String // JSON or comma separated
  manpower       String
  manpowerRoles  String
  equipmentUsed  String // JSON or comma separated
  safetyIncident String?
  safetyDetails  String?
  qualityCheck   String?
  qualityDetails String?
  delayIssue     String?
  delayDetails   String?
  materials      String // JSON
  subcontractor  String?
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
}

model WeeklyProgressReport {
  id              String   @id @default(uuid()) @db.Uuid
  projectId       String   @db.Uuid
  weekStart       DateTime
  weekEnding      DateTime
  milestones      String
  plannedProgress String
  actualProgress  String
  progressRemarks String?
  issues          String?
  risks           String?
  safetySummary   String?
  qualitySummary  String?
  manpower        String // JSON
  equipment       String // JSON
  materials       String // JSON
  teamPerformance String?
  attachments     String? // file links, JSON
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
}

model Event {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  type        String
  date        DateTime
  time        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
}

model Vendor {
  id          String      @id @default(uuid()) @db.Uuid
  gstin       String? // GSTIN / UIN
  name        String // Vendor Name (required)
  vendorType  VendorType  @default(COMPANY)
  gstCategory GstCategory @default(UNREGISTERED)

  // Contact Information
  email  String?
  mobile String?

  // Address Information
  postalCode   String?
  addressLine1 String?
  addressLine2 String?
  city         String?
  state        String?
  country      String  @default("India")

  // Relationships
  createdBy String @db.Uuid
  creator   User   @relation("VendorCreator", fields: [createdBy], references: [id])

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Additional fields for existing functionality
  category     String?
  location     String?
  contact      String?
  address      String?
  paymentTerms String?
  documents    String? // JSON or comma separated file links

  // Relations to other models
  purchaseOrders PurchaseOrder[]
  bids           Bid[]

  @@map("vendors")
}

model Tax {
  id          String      @id @default(uuid()) @db.Uuid
  title       String
  company     String
  taxCategory String?
  userId      String      @db.Uuid
  user        User        @relation(fields: [userId], references: [id])
  taxCharges  TaxCharge[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model TaxCharge {
  id              String         @id @default(uuid()) @db.Uuid
  paymentId       String?        @db.Uuid
  taxId           String?        @db.Uuid
  payment         Payment?       @relation(fields: [paymentId], references: [id])
  tax             Tax?           @relation(fields: [taxId], references: [id])
  type            TaxType
  accountHead     String
  taxRate         Float
  amount          Float
  total           Float
  PurchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String?  @db.Uuid 
}

// Items within a material request
model MaterialRequestItem {
  id                String          @id @default(uuid()) @db.Uuid
  materialRequestId String          @db.Uuid
  materialRequest   MaterialRequest @relation(fields: [materialRequestId], references: [id], onDelete: Cascade)
  itemCode          String
  requiredBy        String? // Date as string for flexibility
  quantity          Float           @default(0)
  targetWarehouse   String?
  uom               String
  createdAt         DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("material_request_items")
}

enum TaxType {
  TDS
  GST
  TCS
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum InvoiceType {
  STANDARD
  PROFORMA
  CREDIT_NOTE
  DEBIT_NOTE
}

enum Unit {
  CUBIC_METRE
  TONNE
  SQUARE_METRE
  PIECE
  LITRE
  KILOGRAM
  // Add more as needed
}

enum PaymentType {
  RECEIVE
  PAY
}

enum PartyType {
  CUSTOMER
  VENDOR
  EMPLOYEE
  BANK
}

enum MaterialRequestStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MaterialRequestPurpose {
  PURCHASE
  TRANSFER
  CONSUMPTION
  MAINTENANCE
  OTHER
}

// Vendor Type Enum
enum VendorType {
  COMPANY
  INDIVIDUAL
  PARTNERSHIP
  PROPRIETORSHIP
}

// GST Category Enum
enum GstCategory {
  UNREGISTERED
  REGISTERED
  COMPOSITION
  SEZ
  DEEMED_EXPORT
}
